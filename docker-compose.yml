version: '3.9'

services:
  #============================================
  # API Gateway (Punto de entrada único)
  #============================================

  #============================================
  # Microservicios de la Aplicación
  #============================================
#  auth-service:
#    build:
#      context: ./auth-service
#      dockerfile: Dockerfile
#    container_name: auth-service
#    env_file: ./.env
#    environment:
#      - PORT=3001
#      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
#      - RABBITMQ_URL=amqp://rabbitmq:5672
#    networks:
#      - app_network
#    depends_on:
#      postgres-db:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 60s
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
#    restart: unless-stopped

#  users-service:
#    build:
#      context: ./users-service
#      dockerfile: Dockerfile
#    container_name: users-service
#    env_file: ./.env
#    environment:
#      - PORT=3002
#      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
#      - RABBITMQ_URL=amqp://rabbitmq:5672
#    networks:
#      - app_network
#    depends_on:
#      postgres-db:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 60s
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
#    restart: unless-stopped
#
#  media-service:
#    build:
#      context: ./media-service
#      dockerfile: Dockerfile
#    container_name: media-service
#    env_file: ./.env
#    environment:
#      - PORT=3003
#      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
#      - RABBITMQ_URL=amqp://rabbitmq:5672
#    networks:
#      - app_network
#    depends_on:
#      postgres-db:
#        condition: service_healthy
#      rabbitmq:
#        condition: service_healthy
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 60s
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
#    restart: unless-stopped

  #============================================
  # Base de Datos
  #============================================
  postgres-db:
    image: postgres:16-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"    # Puerto para la API de MinIO
      - "9001:9001"    # Puerto para la consola web de MinIO
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_SERVER_CORS_ALLOW_ORIGIN=*
    command: server /data --console-address ":9001"
  #============================================
  # Agente de Mensajes (Message Broker)
  #============================================
  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"   # Puerto para clientes AMQP
      - "15672:15672" # Puerto para la UI de management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - ./infrastructure/rabbitmq/config:/etc/rabbitmq:ro
    networks:
      - app_network
    environment:
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_VHOST=/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  #============================================
  # Stack de Logging (ELK)
  #============================================
  elasticsearch:
    image: elasticsearch:8.15.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false # Deshabilitado para desarrollo local
      - cluster.name=logs-cluster
      - node.name=logs-node
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  logstash:
    image: logstash:8.15.0
    container_name: logstash
    environment:
      - xpack.monitoring.enabled=false
    ports:
      - "5044:5044" # Puerto para recibir logs
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600" # Puerto para la API de Logstash
    volumes:
      - ./infrastructure/logstash/pipeline:/usr/share/logstash/pipeline:ro
    networks:
      - app_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  kibana:
    image: kibana:8.15.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana.localhost
      - SERVER_HOST=0.0.0.0
    networks:
      - app_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl", "-f", "http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.19.2
    container_name: filebeat
    user: root
    environment:
      - setup.kibana.host=kibana:5601
      - output.elasticsearch.hosts=["elasticsearch:9200"]
    volumes:
      - ./infrastructure/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app_network

  #============================================
  # Stack de Monitoreo (Métricas)
  #============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app_network
    depends_on:
      - prometheus
    restart: unless-stopped
  metricbeat:
    image: docker.elastic.co/beats/metricbeat:9.1.2
    container_name: metricbeat
    user: root
    environment:
      - setup.kibana.host=kibana:5601
      - output.elasticsearch.hosts=["elasticsearch:9200"]
    volumes:
      - ./infrastructure/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app_network
#============================================
# Volúmenes y Redes
#============================================
volumes:
  postgres_data:
  rabbitmq_data:
    driver: local
  es_data:
    driver: local
  prometheus_data:
  grafana_data:

networks:
  app_network:
    driver: bridge